/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2014-2018 Mickael Jeanroy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package {{package}};

import org.assertj.core.api.AssertionInfo;

/**
 * Reusable assertions of http response.
 * This class is implemented as a singleton.
 * This class is thread safe.
 * This class is automatically generated during build.
 */
public class {{class_name}} extends AbstractRestAssertions {

	/**
	 * Singleton instance.
	 */
	private static final {{class_name}} INSTANCE = new {{class_name}}();

	/**
	 * Returns the singleton instance of this class.
	 */
	public static {{class_name}} instance() {
		return INSTANCE;
	}

	/**
	 * Original assertions object, retrieved from core module.
	 */
	private final {{core_class_name}} assertions = {{core_class_name}}.instance();

	// Private constructor to ensure class is a singleton
	private {{class_name}}() {
	}

	{{#methods}}
	/**
	 * @see {{core_class_name}}#{{core_method_name}}
	 *
	 * @param info contains information about the assertion.
	 * @param actual actual object.
	 * @throws AssertionError
	 */
	public void {{method_name}}(AssertionInfo info, {{actual_class}} actual{{#arguments}}, {{type}}{{#genericType}}<{{genericType}}>{{/genericType}} {{name}}{{/arguments}}) {
		assertNotNull(info, actual);
		check(info, assertions.{{core_method_name}}(actual{{#arguments}}, {{name}}{{/arguments}}));
	}

	{{/methods}}
}
